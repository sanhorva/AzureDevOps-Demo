trigger:
- azure

pool:
    vmImage: 'ubuntu-latest'

variables:
  ACR_NAME: 'crsanyi'
  IMAGE_NAME: 'mywebapp:$(Build.BuildId)'
  IMAGE_REPOSITORY: 'crsanyi.azurecr.io/mywebapp'
  TAG: '$(Build.BuildId)'

stages:
- stage: BuildApp
  jobs:
  - job: BuildPushImage
    steps: 
    - task: AzureCLI@2
      displayName: 'Build and push Docker image'
      inputs:
        azureSubscription: 'ZEISSgroup-DI05-ASM-Learning'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        addSpnToEnvironment: true
        inlineScript: |
          docker build -t $ACR_NAME.azurecr.io/$IMAGE_NAME -f Dockerfile .
          az acr login --name $ACR_NAME
          docker tag $IMAGE_NAME $ACR_NAME.azurecr.io/$IMAGE_NAME
          docker push $ACR_NAME.azurecr.io/$IMAGE_NAME

- stage: pushimagedockerhub
  jobs:
  - job: push
    steps:
    - task: Docker@2
      inputs:
        containerRegistry: 'dockerhub'
        repository: 'interiordesign/demo'
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'
# - stage: PushAppAWS
#   jobs:
#   - job: BuildPushImage
#     steps:
#     - task: ECRPushImage@1
#       inputs:
#         awsCredentials: 'aws'
#         regionName: 'eu-central-1'
#         imageSource: 'imagename'
#         sourceImageName: 'mywebapp:$(Build.BuildId)'
#         repositoryName: 'sanyiaws'
#     - script: |
#         aws ecr get-login-password --region eu-central-1 | docker login --username AWS --password-stdin public.ecr.aws/p6l6z3x7/sanyiaws


# - stage: DeployDev
#   jobs:
#   - job: DeployDev
#     steps:
#     - task: AzureRmWebAppDeployment@4
#       inputs:
#         ConnectionType: 'AzureRM'
#         azureSubscription: 'ZEISSgroup-DI05-ASM-Learning'
#         appType: 'webAppContainer'
#         WebAppName: 'sanyilinuxwebappcon'
#         DockerNamespace: 'crsanyi'
#         DockerRepository: '$(IMAGE_REPOSITORY)'
#         DockerImageTag: '$(TAG)'

# - stage: DeployTest
#   condition: and(succeeded(), eq(variables['Build.Reason'], 'Schedule'))
#   jobs:
#   - job: DeployTest
#     steps:
#     - task: AzureRmWebAppDeployment@4
#       inputs:
#         ConnectionType: 'AzureRM'
#         azureSubscription: 'ZEISSgroup-DI05-ASM-Learning'
#         appType: 'webAppContainer'
#         WebAppName: 'testsanyilinuxwebapp'
#         DockerNamespace: 'crsanyi'
#         DockerRepository: '$(IMAGE_REPOSITORY)'
#         DockerImageTag: '$(TAG)'

# - stage: DeployProdAzure
#   jobs:
#   - job: ApproveRelease
#     timeoutInMinutes: 4320 # job times out in 3 days
#     pool: server
#     steps:
#     - task: ManualValidation@0
#       timeoutInMinutes: 1440 # task times out in 1 day 
#       inputs:
#         notifyUsers: 'sandor.horvath@zeiss.com'
#         instructions: 'Please validate and approve the deplyoment to prod.'
#   - job: DeployProd
#     steps:
#     - task: AzureRmWebAppDeployment@4
#       inputs:
#         ConnectionType: 'AzureRM'
#         azureSubscription: 'ZEISSgroup-DI05-ASM-Learning'
#         appType: 'webAppContainer'
#         WebAppName: 'prodsanyilinuxwebapp'
#         DockerNamespace: 'crsanyi'
#         DockerRepository: '$(IMAGE_REPOSITORY)'
#         DockerImageTag: '$(TAG)'

- stage: DeployProdAWS
  jobs:
  # - job: ApproveRelease
  #   timeoutInMinutes: 4320 # job times out in 3 days
  #   pool: server
  #   steps:
  #   - task: ManualValidation@0
  #     timeoutInMinutes: 1440 # task times out in 1 day 
  #     inputs:
  #       notifyUsers: 'sandor.horvath@zeiss.com'
  #       instructions: 'Please validate and approve the deplyoment to prod.'
  - job: DeployProd
    steps:
    - task: DownloadSecureFile@1
      name: sshKey
      inputs:
        secureFile: 'private.pem'
    - script: |
        sudo chmod 400 $(sshKey.secureFilePath)
        ssh -o StrictHostKeyChecking=no -i $(sshKey.secureFilePath) ubuntu@3.66.170.63 "
          sudo apt update -y && 
          sudo apt install -y docker.io &&
          sudo usermod -aG docker ubuntu && 
          sudo systemctl restart docker &&
          docker ps -aq | xargs -r docker stop | xargs -r docker rm &&
          docker image pull interiordesign/demo
          docker run -d -p 8080:80 interiordesign/demo:latest"
      
